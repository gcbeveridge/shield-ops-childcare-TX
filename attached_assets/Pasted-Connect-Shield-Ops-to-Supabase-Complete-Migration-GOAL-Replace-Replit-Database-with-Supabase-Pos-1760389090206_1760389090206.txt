Connect Shield Ops to Supabase - Complete Migration

GOAL: Replace Replit Database with Supabase PostgreSQL for production-ready data storage.

## CONTEXT:
- Supabase credentials are stored in Replit Secrets:
  - SUPABASE_URL
  - SUPABASE_ANON_KEY  
  - SUPABASE_SERVICE_KEY
- Current app uses Replit DB (key-value store)
- Need to migrate to Supabase (relational database)

## STEP 1: Install Supabase Client

Install the Supabase JavaScript client:
```bash
npm install @supabase/supabase-js
STEP 2: Create Supabase Configuration
Create file: backend/config/supabase.js
javascriptconst { createClient } = require('@supabase/supabase-js');

// Initialize Supabase client with credentials from environment
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY; // Use service key for backend

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Supabase credentials missing! Check Replit Secrets.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Test connection
async function testConnection() {
  try {
    const { data, error } = await supabase.from('facilities').select('count');
    if (error && error.code !== 'PGRST116') { // PGRST116 = table doesn't exist yet (OK)
      console.error('‚ùå Supabase connection error:', error);
    } else {
      console.log('‚úÖ Supabase connected successfully!');
    }
  } catch (err) {
    console.error('‚ùå Supabase connection failed:', err.message);
  }
}

testConnection();

module.exports = supabase;
STEP 3: Create Database Schema in Supabase
Create file: backend/config/schema.sql
This SQL will create all necessary tables in Supabase:
sql-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- FACILITIES TABLE
CREATE TABLE IF NOT EXISTS facilities (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  address JSONB NOT NULL,
  phone TEXT,
  email TEXT,
  license_number TEXT,
  capacity INTEGER DEFAULT 60,
  owner_id UUID,
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- USERS TABLE
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('owner', 'director', 'staff')),
  facility_id UUID REFERENCES facilities(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- STAFF TABLE
CREATE TABLE IF NOT EXISTS staff (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  name TEXT NOT NULL,
  email TEXT,
  role TEXT,
  hire_date DATE,
  certifications JSONB DEFAULT '{}',
  training_hours INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- INCIDENTS TABLE
CREATE TABLE IF NOT EXISTS incidents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  child_name TEXT NOT NULL,
  incident_type TEXT NOT NULL,
  description TEXT NOT NULL,
  occurred_at TIMESTAMPTZ NOT NULL,
  reported_by TEXT NOT NULL,
  action_taken TEXT,
  parent_notified BOOLEAN DEFAULT FALSE,
  parent_signature TEXT,
  signed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- MEDICATIONS TABLE
CREATE TABLE IF NOT EXISTS medications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  child_name TEXT NOT NULL,
  medication_name TEXT NOT NULL,
  dosage TEXT NOT NULL,
  frequency TEXT NOT NULL,
  parent_authorization JSONB NOT NULL,
  physician_orders JSONB,
  start_date DATE NOT NULL,
  end_date DATE,
  status TEXT DEFAULT 'active',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- MEDICATION LOGS TABLE
CREATE TABLE IF NOT EXISTS medication_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  medication_id UUID REFERENCES medications(id) NOT NULL,
  administered_at TIMESTAMPTZ NOT NULL,
  administered_by TEXT NOT NULL,
  verified_by TEXT NOT NULL,
  dosage_given TEXT NOT NULL,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- CHECKLISTS TABLE
CREATE TABLE IF NOT EXISTS checklists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  date DATE NOT NULL,
  tasks JSONB NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(facility_id, date)
);

-- DOCUMENTS TABLE
CREATE TABLE IF NOT EXISTS documents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  title TEXT NOT NULL,
  category TEXT NOT NULL,
  file_path TEXT NOT NULL,
  file_size INTEGER,
  uploaded_by TEXT,
  expiration_date DATE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- COMPLIANCE REQUIREMENTS TABLE
CREATE TABLE IF NOT EXISTS compliance_requirements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  facility_id UUID REFERENCES facilities(id) NOT NULL,
  requirement_code TEXT NOT NULL,
  requirement_title TEXT NOT NULL,
  status TEXT DEFAULT 'pending',
  completed_at TIMESTAMPTZ,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- TRAINING MODULES TABLE
CREATE TABLE IF NOT EXISTS training_modules (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  month TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- TRAINING COMPLETIONS TABLE
CREATE TABLE IF NOT EXISTS training_completions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  staff_id UUID REFERENCES staff(id) NOT NULL,
  module_id UUID REFERENCES training_modules(id) NOT NULL,
  completed_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(staff_id, module_id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_staff_facility ON staff(facility_id);
CREATE INDEX IF NOT EXISTS idx_incidents_facility ON incidents(facility_id);
CREATE INDEX IF NOT EXISTS idx_medications_facility ON medications(facility_id);
CREATE INDEX IF NOT EXISTS idx_checklists_facility_date ON checklists(facility_id, date);
CREATE INDEX IF NOT EXISTS idx_documents_facility ON documents(facility_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add updated_at triggers to tables
CREATE TRIGGER update_facilities_updated_at BEFORE UPDATE ON facilities FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_staff_updated_at BEFORE UPDATE ON staff FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_incidents_updated_at BEFORE UPDATE ON incidents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_medications_updated_at BEFORE UPDATE ON medications FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_checklists_updated_at BEFORE UPDATE ON checklists FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_documents_updated_at BEFORE UPDATE ON documents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
STEP 4: Run Schema in Supabase
After creating the schema.sql file, tell me and I'll give you instructions to run it in Supabase dashboard.
STEP 5: Update Database Configuration
Update backend/config/database.js to use Supabase:
javascriptconst supabase = require('./supabase');

// Helper functions to maintain compatibility with existing code
const db = {
  // Get a single record
  async get(key) {
    try {
      const [table, id] = key.split(':');
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .eq('id', id)
        .single();
      
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('DB get error:', error);
      return null;
    }
  },

  // Set a record
  async set(key, value) {
    try {
      const [table, id] = key.split(':');
      const { data, error } = await supabase
        .from(table)
        .upsert({ ...value, id })
        .select()
        .single();
      
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('DB set error:', error);
      throw error;
    }
  },

  // List records with prefix
  async list(prefix) {
    try {
      const table = prefix.replace(':', '');
      const { data, error } = await supabase
        .from(table)
        .select('*');
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('DB list error:', error);
      return [];
    }
  },

  // Delete a record
  async delete(key) {
    try {
      const [table, id] = key.split(':');
      const { error } = await supabase
        .from(table)
        .delete()
        .eq('id', id);
      
      if (error) throw error;
      return true;
    } catch (error) {
      console.error('DB delete error:', error);
      throw error;
    }
  }
};

module.exports = db;
STEP 6: Create Migration Script
Create file: backend/scripts/migrate-to-supabase.js
javascriptconst replitDb = require('@replit/database');
const supabase = require('../config/supabase');

async function migrateData() {
  console.log('üöÄ Starting migration from Replit DB to Supabase...\n');

  try {
    // Get all keys from Replit DB
    const keys = await replitDb.list();
    console.log(`üì¶ Found ${keys.length} records in Replit DB\n`);

    let migrated = 0;
    let errors = 0;

    for (const key of keys) {
      try {
        const value = await replitDb.get(key);
        const [table, id] = key.split(':');

        if (!table || !id) {
          console.log(`‚è≠Ô∏è  Skipping invalid key: ${key}`);
          continue;
        }

        // Insert into Supabase
        const { error } = await supabase
          .from(table)
          .upsert({ ...value, id });

        if (error) {
          console.error(`‚ùå Error migrating ${key}:`, error.message);
          errors++;
        } else {
          console.log(`‚úÖ Migrated: ${key}`);
          migrated++;
        }
      } catch (err) {
        console.error(`‚ùå Error processing ${key}:`, err.message);
        errors++;
      }
    }

    console.log(`\nüìä Migration complete!`);
    console.log(`‚úÖ Migrated: ${migrated}`);
    console.log(`‚ùå Errors: ${errors}`);
    console.log(`üìà Total: ${keys.length}`);

  } catch (error) {
    console.error('üí• Migration failed:', error);
    process.exit(1);
  }
}

// Run migration
migrateData();
STEP 7: Update Controllers to Use Supabase Directly
For better performance, update controllers to use Supabase queries directly instead of the key-value wrapper.
Example: Update backend/controllers/facilityController.js:
javascriptconst supabase = require('../config/supabase');

exports.getFacility = async (req, res) => {
  try {
    const { facilityId } = req.params;

    const { data: facility, error } = await supabase
      .from('facilities')
      .select('*')
      .eq('id', facilityId)
      .single();

    if (error) throw error;

    if (!facility) {
      return res.status(404).json({
        error: true,
        message: 'Facility not found'
      });
    }

    res.json({
      success: true,
      facility
    });
  } catch (error) {
    console.error('Get facility error:', error);
    res.status(500).json({
      error: true,
      message: 'Failed to fetch facility'
    });
  }
};

exports.getDashboardData = async (req, res) => {
  try {
    const { facilityId } = req.params;

    // Fetch all data in parallel using Supabase
    const [
      facility,
      staff,
      incidents,
      medications,
      checklist
    ] = await Promise.all([
      supabase.from('facilities').select('*').eq('id', facilityId).single(),
      supabase.from('staff').select('*').eq('facility_id', facilityId),
      supabase.from('incidents').select('*').eq('facility_id', facilityId),
      supabase.from('medications').select('*').eq('facility_id', facilityId).eq('status', 'active'),
      supabase.from('checklists').select('*').eq('facility_id', facilityId).eq('date', new Date().toISOString().split('T')[0]).single()
    ]);

    // Calculate metrics
    const staffCount = staff.data?.length || 0;
    const incidentCount = incidents.data?.length || 0;
    const medicationCount = medications.data?.length || 0;
    
    const checklistCompletion = checklist.data ? 
      Math.round((checklist.data.tasks.filter(t => t.completed).length / checklist.data.tasks.length) * 100) : 0;

    res.json({
      success: true,
      facilityInfo: {
        name: facility.data?.name,
        location: `${facility.data?.address.city}, ${facility.data?.address.state}`,
        capacity: facility.data?.capacity,
        currentEnrollment: facility.data?.currentEnrollment || 0,
        staffCount
      },
      complianceStatus: {
        overallPercentage: 94, // Calculate from compliance_requirements table
        completeRequirements: 11,
        totalRequirements: 12,
        pendingRequirements: 1
      },
      todayStats: {
        childrenPresent: facility.data?.currentEnrollment || 0,
        staffOnDuty: staffCount,
        incidentsToday: incidentCount,
        medicationsGiven: medicationCount,
        checklistCompletion
      },
      recentIncidents: incidents.data?.slice(0, 5) || [],
      upcomingExpirations: [], // TODO: Calculate from staff certifications
      actionItems: []
    });

  } catch (error) {
    console.error('Dashboard error:', error);
    res.status(500).json({
      error: true,
      message: 'Failed to fetch dashboard data'
    });
  }
};
SUCCESS CRITERIA:
After completing these steps:

‚úÖ Supabase client installed
‚úÖ Configuration file created with credentials
‚úÖ Database schema created in Supabase
‚úÖ Migration script ready
‚úÖ Controllers updated to use Supabase
‚úÖ Existing Replit DB data migrated
‚úÖ App connects to Supabase successfully
‚úÖ All features work with new database

TESTING:
After migration, test:

Login still works
Dashboard loads data
Can create new staff, incidents, medications
All CRUD operations function correctly

Build this Supabase integration now. Start with Steps 1-4, then wait for me to run the schema in Supabase dashboard before proceeding with Steps 5-7.